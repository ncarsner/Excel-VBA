Sub Number()
'
' Formats active column as Number, no zeroes
'
    Dim RL As Long, CL As Integer
    RL = ActiveCell.Row
    CL = ActiveCell.Column
    
    ActiveCell.EntireColumn.Select
    Selection.NumberFormat = "0"
    
    Cells(RL, CL).Select

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub Dates()
'
' Formats active column as Short Date (M/D/YYYY)
'
    Dim RL As Long, CL As Integer
    RL = ActiveCell.Row
    CL = ActiveCell.Column
    
    ActiveCell.EntireColumn.Select
    Selection.NumberFormat = "m/d/yyyy"

    Cells(RL, CL).Select

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub PasteAll()
'
' Removes formulas from Active Sheet by copying and pasting all values, prompts for verification prior to execution
'
    Dim RL As Long, CL As Integer
    RL = ActiveCell.Row
    CL = ActiveCell.Column

    If MsgBox("This will copy and paste all content! Are you sure?", vbYesNo) = vbNo Then Exit Sub

    ActiveSheet.Cells.Copy
    ActiveSheet.Cells.PasteSpecial Paste:=xlPasteValues
    Application.CutCopyMode = False
    
    Cells(RL, CL).Select

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub RenameSheet()
'
' Prompts cancellable input value, renames Active Sheet tab to input value
'
    Dim RL As Long, CL As Integer
    RL = ActiveCell.Row
    CL = ActiveCell.Column
    
    On Error GoTo ErrHandler

    ActiveSheet.Name = InputBox("New tab name?")
    
    Cells(RL, CL).Select
    
ErrHandler:
    Exit Sub

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub CellQA()
'
' Shades Active Cell(s) to Yellow background, Red text
'
    Application.Selection.Interior.Color = RGB(255, 255, 0)
    Application.Selection.Font.Color = RGB(255, 0, 0)

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub NoColor()
'
' Removes background color and font color from Active Cell(s)
'
    Application.Selection.Interior.Color = xlNone
    Application.Selection.Font.ColorIndex = xlAuto

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub CellGood()
'
' Shades Active Cell(s) to Light Green background, Dark Green text (Good per Excel format ribbon)
'
    Application.Selection.Interior.Color = RGB(198, 239, 206)
    Application.Selection.Font.Color = RGB(0, 97, 0)
    
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub CellNeutral()
'
' Shades Active Cell(s) to Beige background, Dark Brown text (Neutral per Excel format ribbon)
'
    Application.Selection.Interior.Color = RGB(255, 235, 156)
    Application.Selection.Font.Color = RGB(156, 101, 0)
    
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub CellBad()
'
' Shades Active Cell(s) to Light Red background, Dark Red text (Bad per Excel format ribbon)
'
    Application.Selection.Interior.Color = RGB(255, 199, 206)
    Application.Selection.Font.Color = RGB(156, 0, 6)

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub RefreshPivots()

'
' Refreshes all PivotTables in Active Workbook
'

Dim sh As Worksheet
Dim pt As PivotTable

For Each sh In ActiveWorkbook.Worksheets
    For Each pt In sh.PivotTables
        pt.RefreshTable
        pt.Update
    Next pt
Next sh

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub ColorCellsPrompt()

'
' Prompts user to input 1) cell color and then 2) font color of the current selection
'

Dim lcolor As Long, fcolor As Long

    If Application.Dialogs(xlDialogEditColor).Show(10, 255, 199, 206) = True Then
        'user pressed OK
        lcolor = ActiveWorkbook.Colors(10)
        Application.Selection.Interior.Color = lcolor
    End If

    If Application.Dialogs(xlDialogEditColor).Show(10, 156, 0, 6) = True Then
        fcolor = ActiveWorkbook.Colors(10)
        Application.Selection.Font.Color = fcolor
    Else
        'user pressed Cancel
End If

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub FindFormulas()
'
' Highlights all Cells in Active Sheet with Formulas (not static values)
'
    On Error GoTo ErrHandler

    Selection.SpecialCells(xlCellTypeFormulas, 23).Select
    Exit Sub

ErrHandler:
    MsgBox ("No cells were found")
    Exit Sub
    
End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub TabColors()

' assigns cascading color to all worksheet tabs in the active workbook
Dim ws  As Worksheet
Dim indexcolor As Long

' clears any existing tab colors before prompt
ResetTabColors

    If Application.Dialogs(xlDialogEditColor).Show(10, 255, 199, 206) = True Then
        'user pressed OK
        indexcolor = ActiveWorkbook.Colors(10)
        'Application.Selection.Interior.Color = lcolor
    End If
    
    For Each ws In Worksheets
        ws.Tab.Color = indexcolor
        indexcolor = indexcolor + 2000
    Next ws

End Sub
''''''''''''''''''''''''''''''''''''''''''''''''''
Sub ResetTabColors()

'
' Sets all tab colors to default values
'

Dim ws As Worksheet
    
    For Each ws In Worksheets()
        ws.Tab.Color = RGB(242, 242, 242)
    Next ws
    
End Sub
